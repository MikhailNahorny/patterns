/**
 * State
 * Используется если во время выполнения программы поведение объекта должно меняться в зависимости от состояния.
 * если представить объект в виде графа, где вершины - состояния, определяющие поведение, а рёбра - переходы между состояниями, то
 * такое свойство может быть реализовано условными операторами,
 * но после определенного порога сложности код станет плохо читаемым и плохо поддерживаемым
 *
 * выход: вынести состояния в отдельные классы и передавать их в контекст. человека, поведение которого меняется в зависимости от предыдущего поведения
 * другой возможный пример - объявление на известной барахолке (создание, публикация, модерация, просрочка)
 *
 * паттерн состоит из интерфейса поведения, его реализаций, контекста (в который будут загружены поведения)
 */
package com.nahorny.pattern.behavioral.state;
//MyDay
public class Client {
    public static void main(String[] args) {
        Activity activity = new Sleep();
        Human human = new Human();
        human.setActivity(activity);
        human.justDoIt();
        human.changeActivity();
        human.justDoIt();
        human.changeActivity();
        human.justDoIt();
        human.changeActivity();
        human.justDoIt();
        human.changeActivity();
        human.justDoIt();
    }
}
