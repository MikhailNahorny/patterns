
                                                        Стандарт оформления Java-кода
                                                        1. Соглашения об именах
1.1.	Имена должны быть осмысленными словами (или словосочетаниями в значении соответствующей части речи) английского языка. Исключения допустимы только в особых случаях, например при необходимости соблюсти соответствие имени стороннему документу, протоколу.
1.2.	Имена пакетов и подпакетов – существительные в единственном числе в нижнем регистре, слова разделяются подчеркиваниями (program_installer), но желательно не использовать больше одного слова.
1.3.	Имена классов и интерфейсов – существительные или словосочетания в значении существительных: в нижнем регистре, первые буквы слов в верхнем регистре, разделители слов не используются (ClientInfo); имена классов-исключений заканчиваются на Exception (InvalidUserException).
1.4.	Рекомендуется для классов-наследников использовать имена, в которых содержится имя суперкласса (ModalDialog extends Dialog); исключение – имена классов-наследников, из которых следует, что данный класс наследует суперкласс (Triangle extends Figure).
1.5.	Имена перечислимых типов (enum) – существительные или словосочетания в верхнем регистре, слова разделены подчёркиваниями (Color.RED, Color.LIGHT_GRAY).
1.6.	Имена полей и локальных переменных – существительные в нижнем регистре, первые буквы слов, начиная со второго – в верхнем регистре, разделители слов не используются (fileSize).
1.7.	Имена static final переменных – существительные или словосочетания в верхнем регистре, слова разделены подчёркиваниями (INVALID_RECORD_COLOR). Исключения допустимы для private полей.
1.8.	Имена полей и локальных переменных не должны вводить в заблуждение относительно их типов. Пример неправильного именования переменной:
        String currentPlayer = player.getName();
1.9.	Для именования массивов рекомендуется использовать существительные во множественном числе (File[] files). Для именования коллекций множественное число не используется (List<File> fileList, Set<File> fileSet).
1.10.	Имена методов – глаголы в нижнем регистре (либо словосочетания, отражающие действия), первые буквы слов, начиная со второго – в верхнем регистре, разделители слов не используются (removeFile).
1.11.	В названии методов нужно использовать глаголы, которые как можно более точно и полно описывают то, что выполняет метод.
1.12.	Имена методов, выполняющих чтение/изменение значений полей класса, должны начинаться на get и set, соответственно (getFileAttr, setFileAttr), исключение – методы, возвращающие значения полей типа boolean, они начинаются на is (isVisible).
1.13.	Имена методов, выполняющих преобразование к другому типу данных, должны начинаться на to (toString).
1.14.	Имена методов, которые создают и возвращают созданный объект, должны начинаться с create (createRecord).
1.15.	Имена методов, инициализирующие поля класса или элементы графического интерфейса, должны начинаться с init (initWindow) и использоваться только в конструкторе класса. Таких методов следует избегать.

                                                        2. Требования к отдельным деталям реализации
2.1.	Использование внутренних (inner) классов нежелательно. Исключение – внутренние классы, заменяющие анонимные классы с несколькими методами, либо анонимные классы, используемые более одного раза во внешнем классе.
2.2.	Использование вложенных (nested) классов нежелательно. Исключение – классы перечисления (enum) и классы с модификатором private.
2.3.	Тело метода анонимного класса должно состоять только из вызова метода объемлющего класса.
2.4.	Все элементы программы должны иметь минимально возможную область видимости.
2.5.	Аргументы, передаваемые в методы, не должны изменяться внутри этих методов. В исключительных случаях необходимо описать, в комментариях либо javadoc, что аргумент будет изменен.
2.6.	Запрещается использование статических полей без необходимости. Если метод не использует данные класса, то его следует сделать статическим.
2.7.	Запрещается создание методов, выполняющих две или более самостоятельные операции. Каждый такой метод подлежит разбиению на более мелкие методы.
2.8.	Методы, изменяющие состояние объекта, не должны возвращать статус этой операции (например, метод insert(object) должен выполнять только операцию вставки и не должен возвращать статус этой операции). Исключение – методы, которые в зависимости от состояния объекта либо внешней среды, могут не выполнить требуемое действие.
2.9.	Не рекомендуется возвращать какие-либо значения из методов, изменяющих состояния объекта.
2.10.	Запрещается собственная реализация средств, имеющих аналоги в стандартной библиотеке Java API. Во всех случаях, когда возможно использование библиотечных классов Java API, они должны быть использованы.
2.11.	Использование сторонних библиотек имеющих аналоги в стандартной библиотеке Java API оговаривается отдельно.
2.12.	Запрещается использование средств библиотек, обозначенных в документации как deprecated (устаревшие).
2.13.	Нежелательно использование средств библиотек, обозначенных в документации как legacy (для обратной совместимости).
2.14.	Запрещается применение модификатора final к классам и методам без обоснованной необходимости запретить наследование класса, переопределение метода.
2.15.	Запрещается использовать параметризированные (generic) классы без параметров.

                                                        3. Требования по оформлению исходного текста программы
3.1.	Исходный текст каждого класса программы должен быть размещен в отдельном файле (кроме внутренних и вложенных классов).
3.2.	Порядок следования элементов класса следующий: поля, конструкторы, методы.
3.3.	Программы должны быть выровнены в соответствии со стилем Кернигана и Ритчи (K&R, "one true brace style", 1TBS).
3.4.	Величина стандартного отступа всюду должна быть 2 пробела. Запрещается использовать символ табуляции.
3.5.	Все операторы линейной части программы должны иметь один и тот же отступ.
3.6.	Запрещается перенос аргументов метода в стиле WIN32, т.е. когда каждый аргумент располагается на новой строке. Исключение – большое количество аргументов выходят за пределы видимости строки.
3.7.	Запрещается размещение нескольких операторов в одной строке, кроме случаев, когда это не ухудшает удобочитаемости программы.
3.8.	Комментарии в коде должны оформляться в виде //comment, исключение составляют комментарии к методам, они оформляются в стиле javadoc /** … */
3.9.	Не следует комментировать очевидные моменты, лишние комментарии ухудшают читаемость кода.
3.10.	Не следует документировать переопределенные методы, документация должна быть описана в базовом классе.
3.11.	Комментарии в стиле TODO следует оформлять с припиской об авторе в скобках, например //todo (Sinyakin) сделать проверку
3.12.	Порядок следования модификаторов следующий:
для классов: Annotation public protected private abstract static final strictfp
для полей: Annotation public protected private static final transient volatile
для методов: Annotation public protected private abstract static final synchronized native strictfp
4. Прочие соглашения
Во всех прочих случаях, не указанных в данном документе, необходимо придерживаться Code Conventions for the Java Programming Language, опубликованном на веб-сервере Oracle, ссылка: http://www.oracle.com/technetwork/java/codeconvtoc-136057.html

